// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: runner.proto

package go_sandbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoSandboxService_RunCode_FullMethodName = "/go_sandbox.v1.GoSandboxService/RunCode"
)

// GoSandboxServiceClient is the client API for GoSandboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoSandboxServiceClient interface {
	RunCode(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (GoSandboxService_RunCodeClient, error)
}

type goSandboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSandboxServiceClient(cc grpc.ClientConnInterface) GoSandboxServiceClient {
	return &goSandboxServiceClient{cc}
}

func (c *goSandboxServiceClient) RunCode(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (GoSandboxService_RunCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoSandboxService_ServiceDesc.Streams[0], GoSandboxService_RunCode_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &goSandboxServiceRunCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoSandboxService_RunCodeClient interface {
	Recv() (*RunResponse, error)
	grpc.ClientStream
}

type goSandboxServiceRunCodeClient struct {
	grpc.ClientStream
}

func (x *goSandboxServiceRunCodeClient) Recv() (*RunResponse, error) {
	m := new(RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoSandboxServiceServer is the server API for GoSandboxService service.
// All implementations must embed UnimplementedGoSandboxServiceServer
// for forward compatibility
type GoSandboxServiceServer interface {
	RunCode(*RunRequest, GoSandboxService_RunCodeServer) error
	mustEmbedUnimplementedGoSandboxServiceServer()
}

// UnimplementedGoSandboxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoSandboxServiceServer struct {
}

func (UnimplementedGoSandboxServiceServer) RunCode(*RunRequest, GoSandboxService_RunCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method RunCode not implemented")
}
func (UnimplementedGoSandboxServiceServer) mustEmbedUnimplementedGoSandboxServiceServer() {}

// UnsafeGoSandboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSandboxServiceServer will
// result in compilation errors.
type UnsafeGoSandboxServiceServer interface {
	mustEmbedUnimplementedGoSandboxServiceServer()
}

func RegisterGoSandboxServiceServer(s grpc.ServiceRegistrar, srv GoSandboxServiceServer) {
	s.RegisterService(&GoSandboxService_ServiceDesc, srv)
}

func _GoSandboxService_RunCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoSandboxServiceServer).RunCode(m, &goSandboxServiceRunCodeServer{stream})
}

type GoSandboxService_RunCodeServer interface {
	Send(*RunResponse) error
	grpc.ServerStream
}

type goSandboxServiceRunCodeServer struct {
	grpc.ServerStream
}

func (x *goSandboxServiceRunCodeServer) Send(m *RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GoSandboxService_ServiceDesc is the grpc.ServiceDesc for GoSandboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSandboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_sandbox.v1.GoSandboxService",
	HandlerType: (*GoSandboxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunCode",
			Handler:       _GoSandboxService_RunCode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runner.proto",
}
